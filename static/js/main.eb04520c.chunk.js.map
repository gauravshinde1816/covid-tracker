{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Charts/Charts.js","components/CountryPicker/CountryPicker.js","images/covid.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","sm","md","lg","cx","card","infected","CardContent","Typography","color","gutterBottom","start","end","value","separator","duration","Date","toDateString","fetchData","country","a","changeAbleURL","axios","get","console","log","message","fetchDailyData","modifiedData","map","dailyData","totalConfirmed","total","date","reportDate","FetchCountries","countries","name","Charts","useState","setDailyData","useEffect","lineCharts","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","text","style","width","justifyContent","CountryPicker","handleCountry","setCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb04520c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport styles from \"./Cards.module.css\";\nimport cx from \"classnames\";\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading.....\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          sm={12}\n          md={3}\n          lg={3}\n          className={cx(styles.card, styles.infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography>\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                separator=\",\"\n                duration={2.5}\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography>No. of infected patient COVID-19 </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          sm={12}\n          md={3}\n          lg={3}\n          className={cx(styles.card, styles.recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography>\n              <CountUp\n                start={0}\n                end={recovered.value}\n                separator=\",\"\n                duration={2.5}\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography>No. of recovered patient COVID-19 </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid\n          item\n          component={Card}\n          xs={12}\n          sm={12}\n          md={3}\n          lg={3}\n          className={cx(styles.card, styles.deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography>\n              <CountUp\n                start={0}\n                end={deaths.value}\n                separator=\",\"\n                duration={2.5}\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography>No. of deaths patient COVID-19 </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\nconst URL = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changeAbleURL = URL;\n  if (country) {\n    changeAbleURL = `https://covid19.mathdro.id/api/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, deaths, recovered, lastUpdate },\n    } = await axios.get(changeAbleURL);\n\n    return { confirmed, deaths, recovered, lastUpdate };\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(\"https://covid19.mathdro.id/api/daily\");\n\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.totalConfirmed,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const FetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(\"https://covid19.mathdro.id/api/countries\");\n\n    return countries.map((country) => country.name);\n  } catch (error) {}\n};\n","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Charts.modules.css\";\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n  //Set the function level state\n  const [dailyData, setDailyData] = useState([]);\n\n  //Hooks\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetchDailyData();\n\n      setDailyData(data);\n    };\n    console.log(dailyData);\n\n    fetchData();\n  }, []);\n\n  //Charts\n\n  const lineCharts = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"Infected\",\n            borderColor: \"#3333ff\",\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"Deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255,0,0,0.5)\",\n            fill: true,\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  const barChart = confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0, 0, 255, 0.5)\",\n              \"rgba(0, 255, 0, 0.5)\",\n              \"rgba(255, 0, 0, 0.5)\",\n            ],\n            data: [confirmed.value, recovered.value, deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        text: { display: true, text: `Country: ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div style={{ width: \"70%\", display: \"flex\", justifyContent: \"center\" }}>\n      {country ? barChart : lineCharts}\n    </div>\n  );\n};\n\nexport default Charts;\n","import React, { useState, useEffect } from \"react\";\nimport { FetchCountries } from \"../../api\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport styles from \"./Country.module.css\";\nconst CountryPicker = ({ handleCountry }) => {\n  const [countries, setCountries] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setCountries(await FetchCountries());\n    };\n\n    fetchData();\n    console.log(countries);\n  }, [setCountries]);\n  return (\n    <div>\n      <FormControl className={styles.formControl}>\n        <NativeSelect\n          defaultValue=\"\"\n          onChange={(e) => {\n            handleCountry(e.target.value);\n          }}\n        >\n          <option value=\"\">Global</option>\n          {countries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default CountryPicker;\n","export default __webpack_public_path__ + \"static/media/covid.9e5d4fc7.png\";","import React, { Component } from \"react\";\nimport { Cards, Charts, CountryPicker } from \"./components\";\nimport { fetchData } from \"./api\";\nimport style from \"./App.module.css\";\nimport coronaImage from \"./images/covid.png\";\nexport class App extends Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountry = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={style.container}>\n        <img className={style.image} src={coronaImage} />\n        <Cards data={data} />\n        <CountryPicker handleCountry={this.handleCountry} />\n        <Charts data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}